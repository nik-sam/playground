name: Slack PR Notification

on:
  pull_request:
    types: [review_requested, closed]
  pull_request_review:
    types: [submitted]

env:
  SLACK_CHANNEL: "niks-playground"
  # Mapping of GitHub usernames to display info:
  # - slack_id: For @mentions in Slack (will be used for reviewers only)
  # - display_name: Plain text name to display
  USER_MAPPING: >-
    {
      "nik-sam": {
        "slack_id": "U08E3LB1N58", 
        "display_name": "Nik Shah"
      },
      "nathanboktae": {
        "slack_id": "U05LL2VTCMQ", 
        "display_name": "Nathan Black"
      },
      "mparkms": {
        "slack_id": "U05D7KG510V", 
        "display_name": "Mike Park"
      },
      "kieter": {
        "slack_id": "U08138DJFCN", 
        "display_name": "Ki Balisnomo"
      },
      "mheasell-samsara": {
        "slack_id": "UPM82SML0", 
        "display_name": "Mike Park"
      },
      "aokarkau": {
        "slack_id": "U0668ALQHK7", 
        "display_name": "Alex Okarkau"
      },
      "ethbutler": {
        "slack_id": "U05G15UJEG6", 
        "display_name": "Eth Butler"
      },
      "gillianokaiteye": {
        "slack_id": "U06MJ9LK7U6", 
        "display_name": "Gillian Okaiteye"
      },
      "awakening-owl": {
        "slack_id": "U070WCL9CS2", 
        "display_name": "Jack Lin"
      },
      "declanSamsara": {
        "slack_id": "U072GNN9XHP", 
        "display_name": "Declan Herbertson"
      },
      "NikS-44": {
        "slack_id": "", 
        "display_name": "Nik Shah - Personal"
      }
    }
  TEAM_USERNAMES: >-
    ["nik-sam","nathanboktae","mparkms","kieter","mheasell-samsara","aokarkau","ethbutler","gillianokaiteye","awakening-owl","declanSamsara"]
  # GitHub team name for the platform-ux team
  PLATFORM_UX_TEAM: "platform-ux"
  
jobs:
  check_users:
    runs-on: ubuntu-latest
    # Top-level condition: Only run this job if PR author is in our team
    if: contains(fromJSON(env.TEAM_USERNAMES), github.event.pull_request.user.login)
    outputs:
      should_notify: ${{ steps.check.outputs.should_notify }}
    steps:
      - id: check
        run: |
          SHOULD_NOTIFY="false"
          TEAM_USERNAMES='${{ env.TEAM_USERNAMES }}'
          
          # PR author is already confirmed to be on our team via the job condition
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          echo "PR author ($PR_AUTHOR) is on our team - checking other conditions"
          
          # Process specific event types
          if [[ "${{ github.event.action }}" == "review_requested" ]]; then
            # Check if reviewer is a team or a user
            if [[ "${{ github.event.requested_reviewer.type }}" == "Team" ]]; then
              REVIEWER_TEAM="${{ github.event.requested_reviewer.name }}"
              # SECOND CONDITION: Is the requested team the platform-ux team?
              if [[ "$REVIEWER_TEAM" == "${{ env.PLATFORM_UX_TEAM }}" ]]; then
                echo "Team member $PR_AUTHOR requested review from platform-ux team"
                SHOULD_NOTIFY="true"
              else
                echo "Review was requested for a team ($REVIEWER_TEAM) that is not platform-ux"
              fi
            else
              # Regular user review request
              REVIEWER="${{ github.event.requested_reviewer.login }}"
              
              # SECOND CONDITION: Is the reviewer on our team?
              if [[ $TEAM_USERNAMES == *"\"$REVIEWER\""* ]]; then
                echo "Team member $PR_AUTHOR requested review from team member $REVIEWER"
                SHOULD_NOTIFY="true"
              else
                echo "Reviewer ($REVIEWER) is not on our team"
              fi
            fi
          elif [[ "${{ github.event.action }}" == "submitted" && "${{ github.event.review.state }}" == "approved" ]]; then
            # For PR approval
            REVIEWER="${{ github.event.review.user.login }}"
            
            # SECOND CONDITION: Is the reviewer on our team?
            if [[ $TEAM_USERNAMES == *"\"$REVIEWER\""* ]]; then
              echo "PR from team member $PR_AUTHOR was approved by team member $REVIEWER"
              SHOULD_NOTIFY="true"
            else
              echo "Reviewer ($REVIEWER) is not on our team"
            fi
          elif [[ "${{ github.event.action }}" == "closed" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            # For merges, we already confirmed PR is from our team, so always notify
            echo "PR from team member $PR_AUTHOR was merged"
            SHOULD_NOTIFY="true"
          fi
          
          echo "should_notify=$SHOULD_NOTIFY" >> $GITHUB_OUTPUT
          echo "Final decision: should_notify=$SHOULD_NOTIFY"

  notify_slack:
    # This job requires check_users to have run
    needs: check_users
    # Only run if check_users passed AND it says we should notify
    if: needs.check_users.outputs.should_notify == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Get PR details
        id: pr_details
        run: |
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "PR_URL=${{ github.event.pull_request.html_url }}" >> $GITHUB_OUTPUT
          
          # Get PR author's name (never using mentions)
          PR_USER="${{ github.event.pull_request.user.login }}"
          MAPPING=$(echo '${{ env.USER_MAPPING }}' | jq -r --arg user "$PR_USER" '.[$user] // {}')
          DISPLAY_NAME=$(echo "$MAPPING" | jq -r '.display_name // ""')
          
          if [[ -n "$DISPLAY_NAME" ]]; then
            echo "PR_AUTHOR_DISPLAY=$DISPLAY_NAME" >> $GITHUB_OUTPUT
          else
            echo "PR_AUTHOR_DISPLAY=$PR_USER" >> $GITHUB_OUTPUT
          fi
          
          # Get reviewer's display info (always using mentions if slack_id is available)
          if [[ "${{ github.event.action }}" == "review_requested" ]]; then
            # Check if it's a team review request
            if [[ "${{ github.event.requested_reviewer.type }}" == "Team" ]]; then
              REVIEWER_TEAM="${{ github.event.requested_reviewer.name }}"
              echo "REVIEWER_DISPLAY=@$REVIEWER_TEAM team" >> $GITHUB_OUTPUT
            else
              # Individual reviewer
              REVIEWER="${{ github.event.requested_reviewer.login }}"
              MAPPING=$(echo '${{ env.USER_MAPPING }}' | jq -r --arg user "$REVIEWER" '.[$user] // {}')
              
              SLACK_ID=$(echo "$MAPPING" | jq -r '.slack_id // ""')
              DISPLAY_NAME=$(echo "$MAPPING" | jq -r '.display_name // ""')
              
              if [[ -n "$SLACK_ID" ]]; then
                echo "REVIEWER_DISPLAY=<@$SLACK_ID>" >> $GITHUB_OUTPUT
              elif [[ -n "$DISPLAY_NAME" ]]; then
                echo "REVIEWER_DISPLAY=$DISPLAY_NAME" >> $GITHUB_OUTPUT
              else
                echo "REVIEWER_DISPLAY=$REVIEWER" >> $GITHUB_OUTPUT
              fi
            fi
          fi
          
          # Get review details if applicable
          if [[ "${{ github.event.action }}" == "submitted" ]]; then
            echo "PR_REVIEW_STATE=${{ github.event.review.state }}" >> $GITHUB_OUTPUT
            echo "PR_REVIEW_USER=${{ github.event.review.user.login }}" >> $GITHUB_OUTPUT
            
            REVIEW_USER="${{ github.event.review.user.login }}"
            MAPPING=$(echo '${{ env.USER_MAPPING }}' | jq -r --arg user "$REVIEW_USER" '.[$user] // {}')
            
            SLACK_ID=$(echo "$MAPPING" | jq -r '.slack_id // ""')
            DISPLAY_NAME=$(echo "$MAPPING" | jq -r '.display_name // ""')
            
            if [[ -n "$SLACK_ID" ]]; then
              echo "REVIEWER_DISPLAY=<@$SLACK_ID>" >> $GITHUB_OUTPUT
            elif [[ -n "$DISPLAY_NAME" ]]; then
              echo "REVIEWER_DISPLAY=$DISPLAY_NAME" >> $GITHUB_OUTPUT
            else
              echo "REVIEWER_DISPLAY=$REVIEW_USER" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Send Slack Notification (Review Requested)
        if: github.event.action == 'review_requested'
        id: slack_message
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Review requested from ${{ steps.pr_details.outputs.REVIEWER_DISPLAY }} for PR: <${{ steps.pr_details.outputs.PR_URL }}|${{ steps.pr_details.outputs.PR_TITLE }}>",
              "channel": "${{ env.SLACK_CHANNEL }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.PLATFORM_UX_WEBHOOK_URL }}

      - name: Find and React to Message (Approved)
        if: github.event.review.state == 'approved'
        run: |
          # First find the message
          RESPONSE=$(curl -s -X POST https://slack.com/api/conversations.history \
            -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data "{\"channel\": \"${{ env.SLACK_CHANNEL }}\", \"limit\": 100}")
          
          # Find message with PR URL
          MESSAGE_TS=$(echo $RESPONSE | jq -r --arg url "${{ steps.pr_details.outputs.PR_URL }}" '.messages[] | select(.text | contains($url)) | .ts' | head -n1)
          
          if [ ! -z "$MESSAGE_TS" ]; then
            # Add reaction
            curl -X POST https://slack.com/api/reactions.add \
              -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data "{\"channel\": \"${{ env.SLACK_CHANNEL }}\", \"name\": \"white_check_mark\", \"timestamp\": \"$MESSAGE_TS\"}"
            
            # Post approval comment
            curl -X POST https://slack.com/api/chat.postMessage \
              -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data "{\"channel\": \"${{ env.SLACK_CHANNEL }}\", \"thread_ts\": \"$MESSAGE_TS\", \"text\": \"PR approved by ${{ steps.pr_details.outputs.REVIEWER_DISPLAY }} ✅\"}"
          fi

      - name: Find and React to Message (Merged)
        if: github.event.pull_request.merged == true
        run: |
          # First find the message
          RESPONSE=$(curl -s -X POST https://slack.com/api/conversations.history \
            -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data "{\"channel\": \"${{ env.SLACK_CHANNEL }}\", \"limit\": 100}")
          
          # Find message with PR URL
          MESSAGE_TS=$(echo $RESPONSE | jq -r --arg url "${{ steps.pr_details.outputs.PR_URL }}" '.messages[] | select(.text | contains($url)) | .ts' | head -n1)
          
          if [ ! -z "$MESSAGE_TS" ]; then
            # Add merge reaction
            curl -X POST https://slack.com/api/reactions.add \
              -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data "{\"channel\": \"${{ env.SLACK_CHANNEL }}\", \"name\": \"arrows_counterclockwise\", \"timestamp\": \"$MESSAGE_TS\"}"
          fi